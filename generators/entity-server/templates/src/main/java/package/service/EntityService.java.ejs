<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.service;
import org.springframework.data.jpa.domain.Specification;
<%  const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
    const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance); %>
<%_ if (dto === 'mapstruct') { _%>
import <%=packageName%>.service.dto.<%= asDto(entityClass) %>;
<%_ } else { _%>
import <%=packageName%>.domain.<%= asEntity(entityClass) %>;
<%_ } _%>
<%_ if (pagination !== 'no' || fieldsContainOwnerManyToMany === true) { _%>

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import reactor.core.publisher.Flux;
<%_ } _%>

<%_ if (pagination === 'no' || fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.List;
<%_ } _%>
import java.util.Optional;
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID;
<%_ } _%>

/**
 * Service Interface for managing {@link <% if (dto === 'mapstruct') { %><%= packageName %>.domain.<% } %><%= asEntity(entityClass) %>}.
 */
public interface <%= entityClass %>Service {

    @Transactional(readOnly = true)
    public List<<%= instanceType %>> findByCriteria(<%= criteria %> criteria) {
        log.debug("find by criteria : {}", criteria);
        final Specifications<<%= entityClass %>> specification = createSpecification(criteria);
    <%_ if (dto === 'mapstruct') { _%>
        return <%= entityListToDto %>(<%= repository %>.findAll(specification));
    <%_ } else { _%>
        return <%= repository %>.findAll(specification);
    <%_ } _%>
    }

    private Specification<<%= entityClass %>> createSpecification(<%= criteria %> criteria) {
        Specification<<%= entityClass %>> specification = Specification.where(null);
        if (criteria != null) {
            if (criteria.getId() != null) {
                specification = specification.and(buildSpecification(criteria.getId(), <%= entityClass %>_.id));
            }
            <%_
            fields.forEach((field) => {
                if (isFilterableType(field.fieldType)) { _%>
            if (criteria.get<%= field.fieldInJavaBeanMethod %>() != null) {
                specification = specification.and(<%= getSpecificationBuilder(field.fieldType) %>(criteria.get<%= field.fieldInJavaBeanMethod %>(), <%= entityClass %>_.<%= field.fieldName %>));
            }
            <%_ }
            });

            relationships.forEach((relationship) => {
                const metamodelFieldName = (relationship.relationshipType === 'many-to-many' || relationship.relationshipType === 'one-to-many') ? relationship.relationshipFieldNamePlural : relationship.relationshipFieldName; _%>
            if (criteria.get<%= relationship.relationshipNameCapitalized %>Id() != null) {
                specification = specification.and(buildReferringEntitySpecification(criteria.get<%= relationship.relationshipNameCapitalized %>Id(), <%= entityClass %>_.<%= metamodelFieldName %>, <%= relationship.otherEntityNameCapitalized %>_.id));
            }
            <%_ }); // forEach
        _%>
        }
        return specification;
    }

    /**
     * Return a {@link Page} of {@link <%= instanceType %>} which matches the criteria from the database
     * @param criteria The object which holds all the filters, which the entities should match.
     * @param page The page, which should be returned.
     * @return the matching entities.
     */
    @Transactional(readOnly = true)
    public Page<<%= instanceType %>> findByCriteria(<%= criteria %> criteria, Pageable page) {
        log.debug("find by criteria : {}, page: {}", criteria, page);
        final Specifications<<%= entityClass %>> specification = createSpecification(criteria);
    <%_ if (dto === 'mapstruct') { _%>
        final Page<<%= entityClass %>> result = <%= repository %>.findAll(specification, page);
        return result.map(<%= entityToDtoReference %>);
    <%_ } else { _%>
        return <%= repository %>.findAll(specification, page);
    <%_ } _%>
    }

    /**
     * Save a <%= entityInstance %>.
     *
     * @param <%= instanceName %> the entity to save.
     * @return the persisted entity.
     */
    <%= instanceType %> save(<%= instanceType %> <%= instanceName %>);

    /**
     * Get all the <%= entityInstancePlural %>.
     *<% if (pagination !== 'no') { %>
     * @param pageable the pagination information.<% } %>
     * @return the list of entities.
     */
    <% if (pagination !== 'no') { %>Page<<%= instanceType %><% } else { %>List<<%= instanceType %><% } %>> findAll(<% if (pagination !== 'no') { %>Pageable pageable<% } %>);
<% for (idx in relationships) { if (relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide !== true) { -%>
    /**
     * Get all the <%= asDto(entityClass) %> where <%= relationships[idx].relationshipNameCapitalized %> is {@code null}.
     *
     * @return the list of entities.
     */
    List<<%= instanceType %>> findAllWhere<%= relationships[idx].relationshipNameCapitalized %>IsNull();
<% } } -%>

    <%_ if (fieldsContainOwnerManyToMany === true) { _%>
    /**
     * Get all the <%= entityInstancePlural %> with eager load of many-to-many relationships.
     *
     * @return the list of entities.
     */
    Page<<%= instanceType %>> findAllWithEagerRelationships(Pageable pageable);
    <% } -%>

    <%_ if (reactiveRepositories) { _%>
    /**
     * Get all the <%= entityInstancePlural %>.
     * @return the {@link Flux} of entities.
     */
    Flux<<%= instanceType %>> findAllAsFlux();

    <%_ } _%>
    /**
     * Get the "id" <%= entityInstance %>.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    Optional<<%= instanceType %>> findOne(<%= pkType %> id);

    /**
     * Delete the "id" <%= entityInstance %>.
     *
     * @param id the id of the entity.
     */
    void delete(<%= pkType %> id);<% if (searchEngine === 'elasticsearch') { %>

    /**
     * Search for the <%= entityInstance %> corresponding to the query.
     *
     * @param query the query of the search.
     * <% if (pagination !== 'no') { %>
     * @param pageable the pagination information.<% } %>
     * @return the list of entities.
     */
    <% if (pagination !== 'no') { %>Page<<%= instanceType %><% } else { %>List<<%= instanceType %><% } %>> search(String query<% if (pagination !== 'no') { %>, Pageable pageable<% } %>);<% } %>
    

    
}
